PEP: 1
Title: PEP의 목적 및 안내
Version: $Revision$
Last-Modified: $Date$
Author: Barry Warsaw, Jeremy Hylton, David Goodger, Nick Coghlan
Status: Active
Type: Process
Content-Type: text/x-rst
Created: 13-Jun-2000
Post-History: 21-Mar-2001, 29-Jul-2002, 03-May-2003, 05-May-2012,
              07-Apr-2013


PEP의 정의
==========

PEP는 파이썬 커뮤니티에 정보를 제공하거나, 새로운 기능이나 프로세스 또는
환경을 기술하는 설계 문서이다. PEP는 기능에 대한 간결한 기술 명세와 기능에
대한 이론적 근거를 제공해야 한다.

우리의 의도는 PEP가 굵직한 새 기능에 대한 제안을 하는 기본적인 메커니즘이
되며, 이슈에 대한 커뮤니티의 의견을 수렴하고, 파이썬에 적용하게 될 설계상의
결정에 대한 기록이 되도록 하는 것이다. PEP의 저자는 지역 사회 내에서 합의를
구축하고 반대 의견을 문서화 할 책임이 있다.

PEP는 버전이 매겨진 저장소 내의 텍스트 파일로 관리되기 때문에, 버전의 이력이
곧 기능 제안에 대한 기록이 된다 [1]_.


PEP Types
=========

PEP에는 다음의 세 가지 종류가 있다.

1. **표준 트랙** PEP는 파이썬의 새로운 기능이나 구현을 기술한다.  그것은 또한
   차후의 PEP가 앞으로의 파이썬 버전에서 지원할 표준 라이브러리 지원을
   추가하기에 앞서, 현재의 파이썬 버전을 위한 표준 라이브러리의 외부로부터
   지원될 상호운용성 표준을 기술할 수도 있다.

2. **정보** PEP는 파이썬의 설계 상의 문제나 일반적인 지침 또는 파이썬 
   커뮤니티를 위한 정보를 기술하지만, 새로운 기능을 제안하지는 않는다.
   정보 PEP가 반드시 파이썬 커뮤니티의 합의나 권고를 나타내는 것은 아니며,
   따라서 사용자 및 구현자가 정보 PEP를 무시할 지 혹은 그 조언을 따를 지는
   자유이다.

3. **프로세스** PEP는 파이썬을 둘러싼 프로세스 또는 프로세스(또는 프로세스
   내의 이벤트)의 변경을 기술한다.  프로세스 PEP들은 표준 트랙 PEP와 비슷하지만
   파이썬 언어 자체가 아닌 영역에 적용된다.  구현에 대하여 제안할 수도 있지만,
   파이썬의 코드 기반에 대한 것이 아니다.  그것들은 종종 커뮤니티의 합의를
   필요로 하기 때문이다.  정보 PEP와 달리, 그것들은 권고 이상이며 사용자가
   쉽게 무시할 수 없는 것들이다.  절차, 안내, 의사결정 프로세스의 변경 및
   파이썬 개발에 사용되는 도구나 환경의 변화를 예로 들 수 있다.  메타 PEP
   역시 프로세스 PEP로 간주한다.


PEP의 흐름
==========


파이썬의 BDFL
-------------

이 PEP에는 "BDFL"이 여러 번 등장한다.  이는 "Benevolent Dictator for Life
(친절한 종신 독재자)"의 약어로서, 파이썬 프로그래밍 언어를 최초로
고안하였으며, 최종적인 디자인 결정권을 가진 Guido van Rossum을 지칭한다.


PEP 편집자
----------

PEP 편집자는 PEP 흐름의 관리 및 편집(PEP 번호를 할당하고 각각의 상태를
변경하는 일 등)에 대한 책임을 맡는 개인이다.  자세한 내용은 `PEP Editor
Responsibilities & Workflow`_\ 를 참조하라.  현재 활동 중인 편집자는 다음과
같다.

* Anthony Baxter
* Georg Brandl
* Brett Cannon
* David Goodger
* Jesse Noller
* Guido van Rossum
* Barry Warsaw

PEP의 편집자는 현재 편집자의 초대를 통해 선임한다.  <peps@python.org> 메일링
리스트를 통해 PEP 편집자에게 연락할 수 있다.  PEP 관리와 관련한 모든 이메일
(PEP 번호 요청 및 변경된 버전)은 이 주소로 발송하여야 한다(중복으로 글을
올리지 말기 바란다).


PEP 제출
--------

PEP 프로세스는 파이썬에 대한 새로운 아이디어로부터 시작한다.  단일한 PEP는 단
하나의 주요 제안 또는 새로운 아이디어만을 담도록 하는 것을 강력히 권장한다.
사소한 개선이나 패치는 종종 PEP를 거치지 않고 파이썬 `issue tracker`_\ 에
패치를 제출함으로써 파이썬 개발 흐름에 포함시킬 수 있다.  PEP는 초점이 잘
잡혀 있을 수록 성공하기 쉽다.  PEP 편집자는 초점이 맞지 않거나 너무 광범위한
PEP를 거부할 수 있다.  의심스럽다면 PEP를 초점이 잘 잡힌 여러 개의 PEP로
분할하도록 하라.

각 PEP에는 다음에 기술된 문체와 형식에 따라 PEP를 작성하고, 적절한 포럼에서
토의하며, 아이디어에 대한 커뮤니티의 합의를 구축할 사람이 필요하며, 그러한
역할을 담당하는 사람을 챔피언이라 한다.  이러한 PEP 챔피언(혹은 저자)는
아이디어가 PEP가 될 수 있는지 일단 검토해야 한다.  comp.lang.python 뉴스그룹
(혹은 python-list@python.org 메일링 리스트) 또는 python-ideas 메일링 리스트에
게재하는 것이 최선의 방법이다.

PEP를 작성하기에 앞서 아이디어를 공개적으로 검토함으로써 저자의 시간을
절약할 수 있다.  파이썬에 변경을 일으킬 수 있는 많은 아이디어가 여러 이유로
인해 기각된다.  이전의 논의에 의거하여 기각될 것이 자명한 아이디어에 불필요한
시간을 낭비하지 않도록 파이썬 커뮤니티에 먼저 물어보라(인터넷을 찾아보는
것이 능사는 아니다).  또한 저자만이 아니라 전체 커뮤니티에 적용이 가능한지
확인하는 것도 도움이 된다.  저자가 생각하기에 좋은 아이디어라 할지라도
파이썬을 사용하는 대다수의 영역의 사람들에게도 그렇지는 않을 수도 있기
때문이다.

챔피언이 파이썬 커뮤니티에 질문하여 아이디어가 받아들여질 가능성이 있다고
판단되면, 아이디어를 나타낸 PEP를 작성한다.  저자에게는 적합한 형식과 높은
품질을 갖추고 제안의 주된 관심사를 적시할 기회가 주어진다.

python-ideas에서의 논의에 따라, 그 제안은 PEP 초안으로서 PEP 편집자
<peps@python.org> 메일링 리스트에 전달되어야 한다.  초안은 아래에 기술하는
PEP 형식에 맞추어 기술하여야 하며, 그렇지 않으면 올바른 형식을 따를 때까지
검토 없이 반송된다(작은 오류는 편집자가 수정한다).

PEP 편집자가 승인하면, PEP에 번호를 붙이고, 표준 트랙, 정보 혹은 프로세스의
라벨을 붙이고, "초안" 상태를 부여하여 PEP의 최초 초안을 체크인한다.  PEP
편집자는 이유 없이 PEP를 기각하지 않을 것이다.  PEP 상태를 기각하는 주된
이유는 노력의 중복을 초래하거나, 기술적으로 나쁘거나, 적절한 동기 또는 하위
호환성을 제공하지 못하거나, 파이썬 철학에 위배되는 것 등이다.  BDFL은 승인
단계에 관여할 수 있으며, 초안이 PEP가 될 수 있는지에 대한 최종 결정권을
갖는다.

`PEP repository`_\ 에 대한 hg push 권한을 가진 개발자는 새로운 PEP를 생성 및
커밋함으로써 직접 PEP 번호를 얻을 수 있다.  그렇게 할 때에는, 개발자는
일반적으로 PEP 편집자가 담당하는 업무를 처리하여야 한다(`PEP Editor
Responsibilities & Workflow`_ 참조).  초기 버전이 PEP를 제출하는 데에 있어
따라야 하는 표준을 충족하는지 확인하는 것을 포함한다.  다른 방법으로,
개발자가 PEP를 PEP 편집자에게 제출하는 것을 선택할 수도 있다.  그럴 경우에는
당신이 hg push 권한을 갖고 있다는 것을 PEP 편집자에게 알림으로써 PEP
저장소에 직접 업데이트하는 절차에 대한 안내를 받기 바란다.

업데이트가 성공적이면, PEP 저자는 hg push 권한을 가지고 있는 경우 직접(또는
동료 개발자를 통해) 새로운 버전을 체크인할 수도 있고, 새로운 PEP 버전을 PEP
편집자에게 이메일로 보내어 출판하도록 할 수도 있다.

PEP 번호가 할당되면, PEP 초안이 python-ideas에서 논의될 것이다(PEP 번호를
빨리 할당받는 것이 쉽게 찾는 데에 도움이 된다.  동시에 여러 개의 PEP 초안이
검토 중일 때 특히 그러하다). 결국, 모든 표준 트랙 PEP는 `python-dev 리스트
<mailto:python-dev@python.org>`__\ 로 보내어져서 다음 섹션에서 기술하는
바와 같이 검토된다.

표준 트랙 PEP는 설계 문서와 참조 구현의 두 부분으로 이루어진다.  일반적으로
최소한 프로토타입 구현을 PEP와 함께 개발하는 것을 권장하는데, 이는
이론적으로는 괜찮아보이는 아이디어가 실제 구현을 테스트해보면 실용적이지
못한 것으로 판명되는 경우가 있기 때문이다.

PEP 저자는 PEP를 검토를 위해 제출하기에 앞서 커뮤니티의 피드백을 수집하는
책임을 진다.  그러나, 공개된 메일링 리스트에서 끝없이 이어지는 논의는 가능한
피하도록 한다. 효율적인 논의를 위한 방법으로는 각 주제별로 SIG 메일링 리스트를
구성하거나, 초기 디자인 단계에서는 개인적인 조언을 얻거나, 위키 페이지를
구성하는 것 등이 있다.  이 부분은 PEP 저자의 재량에 맡긴다.


PEP 검토 및 해결
----------------

저자가 PEP를 완료하면, PEP 편집자에게 형식과 일관성에 대해 검토를 요청할
수 있다.  그러나, PEP의 내용과 최종 수용은 BDFL에게 요청하여야 하며, 보통
python-dev 메일링 리스트에 이메일을 보냄으로써 이루어진다.  BDFL과 그가
선택한 컨설턴트들이 PEP를 검토하여, PEP를 승인 또는 기각하거나 개정을 위해
저자에게 반송한다.  수용이 이미 정해진 PEP(명백한 것 및 구현이 이미 체크인
된 것 등)에 대해서도 BDFL이 PEP 검토에 착수하고 PEP 저자에게 알림으로써
개정의 기회를 부여할 수 있다.

PEP 승인의 최종 결정권자는 BDFL이다.  그러나, 새로운 PEP마다, 충분한 경험을
갖추고 최종 결정을 내릴 수 있는 핵심 개발자가 BDFL의 위임자(또는 "PEP
황제")로서 봉사할 수 있다.  그들의 자기 추천이 다른 핵심 개발자와 BDFL에
의해 받아들여지면, 해당 PEP에 대한 승인(또는 거부)의 권한을 갖게 된다.
이 프로세스는 BDFL이 *무언가가* 이루어지는 데에 원칙적으로는 수용을
허락하였지만, 그 PEP를 수용하기 위해 해야할 일들이 남아있는 경우에 자주
일어난다.

최종 결정이 BDFL에 의하여 직접 이루어지지 않고 위임에 의한 것인 경우에는,
PEP에 "BDFL-Delegate" 머리말로서 기록을 남긴다.

PEP 검토 및 해결은 python-dev 이외의 곳에서 이루어질 수도 있다(예를 들어,
표준 라이브러리에 직접적인 영향을 미치지 않는, 패키징에 관련해서는
distutils-sig에서 이루어진다). 이 경우, "Discussions-To" 머리말이 논의와
검토, 공고가 이루어질 메일링 리스트를 식별한다.

PEP가 수용되기 위해서는 몇 가지 최소한의 요건을 갖추어야 한다.  그것은
제안하는 개선사항에 대한 명확하고 완전한 기술이어야 한다.  개선은 완전한
구현을 표현해야 한다.  제안하는 구현은 가능하다면 변함이 없고 인터프리터를
지나치게 복잡하게 만들지 않아야 한다.  마지막으로, 제안하는 개선 사항이
BDFL에 의해 수용되기 위해서는 반드시 "파이썬다와야(pythonic)" 한다.  (그러나,
"파이썬다움"은 부정확한 단어이며, BDFL이 수용하느냐에 달려있다. 이것은 순환
논리이다.)  표준 라이브러리 모듈의 수용 요건에 대해서는 PEP 2 [2]_\ 를
참조하라.

일단 PEP가 수용되면, 참조 구현을 반드시 완료하여야 한다.  참조 구현이 완료되어
주 소스 코드 저장소에 통합되면, 상태가 "최종(Final)"으로 변경된다.

PEP에는 "지연(Deferred)" 상태를 할당할 수도 있다.  PEP에 대하여 아무 진전이
없을 때 PEP 저자 또는 편집자가 이 상태를 부여할 수 있다.  PEP가 일단 지연되면,
PEP 편집자는 그것을 초안 상태로 되돌릴  수 있다.

PEP는 "거부(Rejected)"될 수도 있다.  논의 끝에 좋지 못한 아이디어라고
판명되었기 때문일 수 있다.  이 사실에 대한 기록을 갖는 것이 중요하다. 
"철회(Withdrawn)" 상태도 이와 비슷하게, PEP 저자가 그 PEP에 대하여 좋지
못한 아이디어라고 생각하거나 경쟁 관계의 다른 제안이 더 나은 대안임을 받아들인
것을 의미한다.

PEP가 수용(Accepted), 거부 또는 철회되면, 그에 따라 PEP를 갱신하여야 한다.
상태 필드를 갱신함에 덧붙여, python-dev 메일링 리스트 아카이브의 관련된
게시물을 링크하는 최소한의 Resolution header를 추가하도록 한다.

PEP는 원래의 것을 쓸모 없게 만드는 다른 PEP로 대체될 수도 있다. 이것은
정보 PEP를 위한 것으로, 어떤 API의 버전 2는 버전 1을 대신할 수 있다.

PEP가 가질 수 있는 상태는 다음과 같다.

.. image:: pep-0001-1.png

의도적으로 완료시키지 않는 몇몇 정보 및 프로세스 PEP는 "활성(Active)" 상태를
가질 수 있다.  지금 보고 있는 PEP 1이 그 예이다.


PEP 유지관리
------------

일반적으로, 표준 트랙 PEP는 최종 상태에 도달한 이후에는 더 이상 수정되지
않는다. PEP가 일단 완료되면, 언어 및 표준 라이브러리 레퍼런스가 기대되는
작용에 대한 형식적 문서가 된다.

정보 및 프로세스 PEP는 개발 사례 및 기타 세부 사항에 대한 변경 사항을 반영하기
위해 시간이 지남에 따라 갱신될 수 있다.  정확한 과정은 갱신되는 PEP의 성격과
목적에 따라 달라진다.



성공적인 PEP의 요소
===================

각 PEP는 다음과 같은 부분을 갖추어야 한다.

1. 서론 -- PEP 번호, 짧고 설명적인 제목(최대 44 글자로 제한), 이름, 각
   저자에 대한 연락 정보 등의 PEP에 대한 메타 정보를 담은 RFC 822 스타일의
   머리말.

2. 초록 -- 기술적인 이슈에 대한 짧은(200 단어 이내) 설명을 제시.

3. 저작권/공개 도메인 -- 각 PEP는 공개 도메인(이 PEP가 그 예이다) 또는
   `Open Publication License`_\ 에 의거하여 라이선스됨을 명시하여야 한다.

4. 명세 -- 기술적인 명세는 새로운 언어 기능에 대한 구문(syntax)과 의미
   (semantics)를 기술한다.  명세는 최소한 현재의 주요한 파이썬 플랫폼(CPython,
   Jython, IronPython, PyPy)을 위한 경쟁적이고 상호운용 가능한 구현을 하기에
   충분할 만큼 자세하여야 한다.

5. 동기부여 -- 파이썬 언어를 바꾸고자 하는 PEP에 있어서 동기가 중요하다.
   PEP가 해결하고자하는 문제를 해결하기에 기존의 언어 명세가 불충분한 이유를
   명확하게 설명하여야 한다.  충분한 동기 부여가 되지 않는 PEP 제출은 즉시
   거부할 수 있다.

6. 근거 -- 특정 디자인을 채택한 동기와 이유를 기술한다. 대체 가능한 다른
   디자인에 대한 검토 결과와 함께, 다른 언어에서는 그 기능을 어떻게
   지원하는지와 같은 관련 작업을 기술한다.

   근거에서는 커뮤니티의 내에서 합의가 이루어졌음을 증명하고 논의 과정에서
   있었던 중요한 반대나 우려에 대하여 논의하여야 한다.

7. 하위 호환성 -- 이전 버전과 호환되지 않는 모든 PEP는 이러한 비호환성과
   심각성을 기술하는 섹션을 포함하여야 한다.  PEP는 이러한 비호환성을 어떻게
   처리할 것인지에 대한 저자의 제안을 반드시 설명하여야 한다. 하위 호환성에
   대한 적절한 논문을 갖추지 않은 PEP는 즉시 거부된다.

8. 참조 구현 -- PEP가 "최종" 상태를 얻기 전에 참조 구현이 반드시 완성되어야
   하지만, PEP가 수용되기 전에 반드시 완성되어야 하는 것은 아니다.  코드를
   작성하기 전에 명세 및 근거에 대한 합의에 도달하는 데에 이점이 있기는
   하지만, API의 세부사항에 대한 많은 논의를 해결하기 위한 "거친 합의와
   실행되는 코드"의 원칙은 여전히 유효하다.

   최종 구현은 테스트 코드와 함께, 파이썬 언어 레퍼런스 또는 표준 라이브러리
   레퍼런스에 적합한 문서를 반드시 포함하여야 한다.


PEP 형식 및 템플릿
==================

저자가 사용할 수 있는 PEP 형식에는 일반 텍스트와 reStructuredText_\ 의
두 가지가 있다.  양쪽 다 UTF-8 인코딩의 텍스트 파일이다.

일반 텍스트 PEP는 엄격한 스타일을 따르는 최소한의 구조적 마크업으로 작성된다.
PEP 9에 일반 텍스트 PEP를 작성하는 방법에 대한 설명 및 템플릿 [3]_\ 이 있다.

ReStructuredText_ PEP는 다양한 markup을 사용하여, 여전히 읽기는 쉬우면서도
더 보기 좋고 기능적인 HTML을 만들어낼 수 있다. PEP 12에 reStructuredText
PEP를 작성하는 방법에 대한 설명과 템플릿 [4]_\ 이 있다.

각 스타일의 PEP를 웹에서 보여질 HTML로 변환하는 파이썬 스크립트가 있다 [5]_.
일반 텍스트 PEP의 분석과 변환은 스크립트 내에 포함되어 있다.
reStructuredText PEP는 스크립트에서 호출하는 Docutils_ 코드에 의하여 변환된다.


PEP Header Preamble
===================

Each PEP must begin with an RFC 822 style header preamble.  The headers
must appear in the following order.  Headers marked with "*" are
optional and are described below.  All other headers are required. ::

    PEP: <pep number>
    Title: <pep title>
    Version: <version string>
    Last-Modified: <date string>
    Author: <list of authors' real names and optionally, email addrs>
  * BDFL-Delegate: <PEP czar's real name>
  * Discussions-To: <email address>
    Status: <Draft | Active | Accepted | Deferred | Rejected |
             Withdrawn | Final | Superseded>
    Type: <Standards Track | Informational | Process>
  * Content-Type: <text/plain | text/x-rst>
  * Requires: <pep numbers>
    Created: <date created on, in dd-mmm-yyyy format>
  * Python-Version: <version number>
    Post-History: <dates of postings to python-list and python-dev>
  * Replaces: <pep number>
  * Superseded-By: <pep number>
  * Resolution: <url>

The Author header lists the names, and optionally the email addresses
of all the authors/owners of the PEP.  The format of the Author header
value must be

    Random J. User <address@dom.ain>

if the email address is included, and just

    Random J. User

if the address is not given.  For historical reasons the format
"address@dom.ain (Random J. User)" may appear in a PEP, however new
PEPs must use the mandated format above, and it is acceptable to
change to this format when PEPs are updated.

If there are multiple authors, each should be on a separate line
following RFC 2822 continuation line conventions.  Note that personal
email addresses in PEPs will be obscured as a defense against spam
harvesters.

The BDFL-Delegate field is used to record cases where the final decision to
approve or reject a PEP rests with someone other than the BDFL. (The
delegate's email address is currently omitted due to a limitation in the
email address masking for reStructuredText PEPs)

*Note: The Resolution header is required for Standards Track PEPs
only.  It contains a URL that should point to an email message or
other web resource where the pronouncement about the PEP is made.*

For a PEP where final pronouncement will be made on a list other than
python-dev, a Discussions-To header will indicate the mailing list
or URL where the pronouncement will occur. A temporary Discussions-To header
may also be used when a draft PEP is being discussed prior to submission for
pronouncement. No Discussions-To header is necessary if the PEP is being
discussed privately with the author, or on the python-list, python-ideas
or python-dev mailing lists.  Note that email addresses in the
Discussions-To header will not be obscured.

The Type header specifies the type of PEP: Standards Track,
Informational, or Process.

The format of a PEP is specified with a Content-Type header.  The
acceptable values are "text/plain" for plaintext PEPs (see PEP 9 [3]_)
and "text/x-rst" for reStructuredText PEPs (see PEP 12 [4]_).
Plaintext ("text/plain") is the default if no Content-Type header is
present.

The Created header records the date that the PEP was assigned a
number, while Post-History is used to record the dates of when new
versions of the PEP are posted to python-list and/or python-dev.  Both
headers should be in dd-mmm-yyyy format, e.g. 14-Aug-2001.

Standards Track PEPs will typically have a Python-Version header which
indicates the version of Python that the feature will be released with.
Standards Track PEPs without a Python-Version header indicate
interoperability standards that will initially be supported through
external libraries and tools, and then supplemented by a later PEP to
add support to the standard library. Informational and Process PEPs do
not need a Python-Version header.

PEPs may have a Requires header, indicating the PEP numbers that this
PEP depends on.

PEPs may also have a Superseded-By header indicating that a PEP has
been rendered obsolete by a later document; the value is the number of
the PEP that replaces the current document.  The newer PEP must have a
Replaces header containing the number of the PEP that it rendered
obsolete.


Auxiliary Files
===============

PEPs may include auxiliary files such as diagrams.  Such files must be
named ``pep-XXXX-Y.ext``, where "XXXX" is the PEP number, "Y" is a
serial number (starting at 1), and "ext" is replaced by the actual
file extension (e.g. "png").


Reporting PEP Bugs, or Submitting PEP Updates
=============================================

How you report a bug, or submit a PEP update depends on several
factors, such as the maturity of the PEP, the preferences of the PEP
author, and the nature of your comments.  For the early draft stages
of the PEP, it's probably best to send your comments and changes
directly to the PEP author.  For more mature, or finished PEPs you may
want to submit corrections to the Python `issue tracker`_ so that your
changes don't get lost.  If the PEP author is a Python developer, assign the
bug/patch to them, otherwise assign it to a PEP editor.

When in doubt about where to send your changes, please check first
with the PEP author and/or a PEP editor.

PEP authors with hg push privileges for the PEP repository can update the
PEPs themselves by using "hg push" to submit their changes.


Transferring PEP Ownership
==========================

It occasionally becomes necessary to transfer ownership of PEPs to a
new champion.  In general, it is preferable to retain the original author as
a co-author of the transferred PEP, but that's really up to the
original author.  A good reason to transfer ownership is because the
original author no longer has the time or interest in updating it or
following through with the PEP process, or has fallen off the face of
the 'net (i.e. is unreachable or not responding to email).  A bad
reason to transfer ownership is because the author doesn't agree with the
direction of the PEP.  One aim of the PEP process is to try to build
consensus around a PEP, but if that's not possible, an author can always
submit a competing PEP.

If you are interested in assuming ownership of a PEP, send a message
asking to take over, addressed to both the original author and the PEP
editors <peps@python.org>.  If the original author doesn't respond to
email in a timely manner, the PEP editors will make a unilateral
decision (it's not like such decisions can't be reversed :).


PEP Editor Responsibilities & Workflow
======================================

A PEP editor must subscribe to the <peps@python.org> list.  All
correspondence related to PEP administration should be sent (or forwarded) to
<peps@python.org> (but please do not cross-post!).

For each new PEP that comes in an editor does the following:

* Read the PEP to check if it is ready: sound and complete.  The ideas
  must make technical sense, even if they don't seem likely to be
  accepted.

* The title should accurately describe the content.

* Edit the PEP for language (spelling, grammar, sentence structure,
  etc.), markup (for reST PEPs), code style (examples should match PEP
  8 & 7).

If the PEP isn't ready, an editor will send it back to the author for
revision, with specific instructions.

Once the PEP is ready for the repository, a PEP editor will:

* Assign a PEP number (almost always just the next available number,
  but sometimes it's a special/joke number, like 666 or 3141).
  (Clarification: For Python 3, numbers in the 3000s were used for
  Py3k-specific proposals.  But now that all new features go into
  Python 3 only, the process is back to using numbers in the 100s again.
  Remember that numbers below 100 are meta-PEPs.)

* Add the PEP to a local clone of the PEP repository.  For mercurial workflow
  instructions, follow `The Python Developers Guide <http://docs.python.org/devguide>`_

  The mercurial repo for the peps is::

    http://hg.python.org/peps/

* Run ``./genpepindex.py`` and ``./pep2html.py <PEP Number>`` to ensure they
  are generated without errors. If either triggers errors, then the web site
  will not be updated to reflect the PEP changes.

* Commit and push the new (or updated) PEP

* Monitor python.org to make sure the PEP gets added to the site
  properly. If it fails to appear, running ``make`` will build all of the
  current PEPs. If any of these are triggering errors, they must be
  corrected before any PEP will update on the site.

* Send email back to the PEP author with next steps (post to
  python-list & -dev).

Updates to existing PEPs also come in to peps@python.org.  Many PEP
authors are not Python committers yet, so PEP editors do the commits for them.

Many PEPs are written and maintained by developers with write access
to the Python codebase.  The PEP editors monitor the python-checkins
list for PEP changes, and correct any structure, grammar, spelling, or
markup mistakes they see.

PEP editors don't pass judgment on PEPs.  They merely do the
administrative & editorial part (which is generally a low volume task).

Resources:

* `Index of Python Enhancement Proposals <http://www.python.org/dev/peps/>`_

* `Following Python's Development
  <http://docs.python.org/devguide/communication.html>`_

* `Python Developer's Guide <http://docs.python.org/devguide/>`_

* `Frequently Asked Questions for Developers
  <http://docs.python.org/devguide/faq.html>`_

References and Footnotes
========================

.. [1] This historical record is available by the normal hg commands
   for retrieving older revisions, and can also be browsed via HTTP here:
   http://hg.python.org/peps/

.. [2] PEP 2, Procedure for Adding New Modules, Faassen
   (http://www.python.org/dev/peps/pep-0002)

.. [3] PEP 9, Sample Plaintext PEP Template, Warsaw
   (http://www.python.org/dev/peps/pep-0009)

.. [4] PEP 12, Sample reStructuredText PEP Template, Goodger, Warsaw
   (http://www.python.org/dev/peps/pep-0012)

.. [5] The script referred to here is pep2pyramid.py, the successor to
   pep2html.py, both of which live in the same directory in the hg
   repo as the PEPs themselves.  Try ``pep2html.py --help`` for
   details.  The URL for viewing PEPs on the web is
   http://www.python.org/dev/peps/.

.. _issue tracker:
   http://bugs.python.org/

.. _Open Publication License: http://www.opencontent.org/openpub/

.. _reStructuredText: http://docutils.sourceforge.net/rst.html

.. _Docutils: http://docutils.sourceforge.net/

.. _PEP repository: http://hg.python.org/peps


저작권
======

이 문서는 퍼블릭 도메인에 속한다.


..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
